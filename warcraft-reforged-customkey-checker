#!/usr/bin/env python3

import sys
import argparse
import locale
import json
import logging
from collections import defaultdict

from common import parse_ini_file

LOGGER = logging.getLogger(__name__)

class Generator:
    def __init__(self, args):
        LOGGER.info('Parsing')
        self._hierachy = json.load(args.hierarchy_file)

        self._customkey_file = parse_ini_file(args.customkey_file)

    def run(self):
        LOGGER.info('Detecting conflicts..')
        for cell in self._hierachy.values():
            self._detect_conflicts(cell)

    def _detect_conflicts(self, cell):
        if not cell['is_visible']:
            return

        LOGGER.debug('Checking cell %s for direct conflicts', cell['desc'])
        
        for page_id, page_cells in cell['pages'].items():
            # Retrieve the cells with an assigned button position
            # And associated the current unit with its cells
            owneds_cells = defaultdict(list)
            for owned_cell_id in page_cells:
                owned_cell = self._hierachy.get(owned_cell_id)
                if owned_cell is None or not owned_cell['is_visible']:
                    continue

                position = self._customkey_file.get(owned_cell_id, 'position',
                                                    fallback=owned_cell['position'])
                                                    
                LOGGER.debug('Looking owned cell %s at position "%s"',
                             owned_cell['desc'], position)

                owneds_cells[position].append(owned_cell['desc'])

            # Check if some cells have the same position
            for position, cells in owneds_cells.items():
                if len(cells) != 1:
                    LOGGER.error('Conflict within page %s of %s on position %s: %s',
                                 page_id, cell['desc'], position, ','.join(cells))
                

        LOGGER.debug('No conflict detected')


def main():
    parser = argparse.ArgumentParser(description='Check Warcraft Reforged key positions')
    parser.add_argument('--verbose', action='store_true', help='Enable verbose loggng')
    parser.add_argument('--hierarchy-file', type=argparse.FileType('r'), required=True, help=r'The hierachy file')
    parser.add_argument('--customkey-file', type=argparse.FileType('r'), required=True, help=r'The CustomKeys.txt file to check')

    args = parser.parse_args()

    if args.verbose:
        log_level = logging.DEBUG
    else:
        log_level = logging.INFO
    logging.basicConfig(level=log_level)

    Generator(args).run()

if __name__ == '__main__':
    locale.setlocale(locale.LC_ALL, '')
    main()
